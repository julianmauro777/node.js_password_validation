const crypto = require('crypto')
const { promisify } = require('util')
 
const scrypt = promisify(crypto.scrypt),
  { createHash, randomBytes, timingSafeEqual } = crypto
 
async function hashPassword(password, dbSalt = '') {
  try {
    const salt = dbSalt ? dbSalt : randomBytes(32).toString('hex')
    const sha256 = createHash('sha256')
      .update(await scrypt(password, salt, 32))
      .digest('hex')
 
    return dbSalt ? sha256 : `${salt}:${sha256}`
  } catch (err) {
    throw err
  }
}
 
async function verifyPassword(password, hash) {
  const [salt, dbHash] = hash.split(':')
  try {
    return timingSafeEqual(
      Buffer.from(dbHash),
      Buffer.from(await hashPassword(password, salt))
    )
  } catch (err) {
    throw err
  }
}
 
async function run() {
  const password1 = await hashPassword('test')
  const password2 = await hashPassword('test')
  console.log('password1', await verifyPassword('test', password1))
  console.log('password2', await verifyPassword('test', password2))
  console.log(
    'password2 is "bad-password" ?',
    await verifyPassword('bad-password', password2)
  )
  console.log('password1 === password2 ?', password1 === password2)
}
 
run()
